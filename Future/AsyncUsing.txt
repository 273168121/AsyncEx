- IAsyncDisposable - Task DisposeAsync()
- Async.Using<T>(Func<T>, Action<T>) where T : IAsyncDisposable
  {
    var x = func();
    Exception ex = null;
    try { action(x); }
    catch (Exception exception) { ex = exception; }
    try { await x.DisposeAsync(); }
    catch (Exception exception) { ex = ex ?? exception; }
    if (ex != null) CaptureDispatchInfo.Capture(ex).Throw();
    // TODO: mimic the behavior of the using statement: if Dispose() throws an exception, which exception is propagated?
  }
- Task UsingAsync<TResource>(Func<TResource>, Action<TResource>);
- Task<TResult> UsingAsync<TResource, TResult>(Func<TResource>, Func<TResource, TResult>);
- Task UsingAsync<TResource>(Func<Task<TResource>>, Action<TResource>);
- Task<TResult> UsingAsync<TResource, TResult>(Func<Task<TResource>>, Func<TResource, TResult>);
- Task UsingAsync<TResource>(Func<TResource>, Func<TResource, Task>);
- Task<TResult> UsingAsync<TResource, TResult>(Func<TResource>, Func<TResource, Task<TResult>>);
- Task UsingAsync<TResource>(Func<Task<TResource>>, Func<TResource, Task>);
- Task<TResult> UsingAsync<TResource, TResult>(Func<Task<TResource>>, Func<TResource, Task<TResult>>);
- where TResource : IAsyncDisposable