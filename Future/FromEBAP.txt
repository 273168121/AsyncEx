public static Task<TResult> FromEventBasedAsynchronousPattern<TResult, TEventHandler, TEventArgs>(
    Action<TEventHandler> subscribe, Action<TEventHandler> unsubscribe, Action methodAsync, Func<TEventArgs, TResult> resultSelector) where TEventHandler : null, TEventArgs : AsyncEventArgs
{
  // Does this work?
  var tcs = new TaskCompletionSource<TResult>();
  TEventHandler handler = null;
  Action<object, TEventArgs> handler_ = (_, e) =>
  {
    if (e.Cancelled)
      tcs.TrySetCanceled();
    else if (e.Error != null)
      tcs.TrySetException(e.Error);
    else
      tcs.TrySetResult(resultSelector(e));
    unsubscribe(handler);
  };
  handler = (TEventHandler)Delegate.CreateDelegate(typeof(TEventHandler), handler_.Target, handler_.Method);
  subscribe(handler);
  methodAsync();
  return tcs.Task;
}

var e = AsyncFactory<TResult>.FromEventBasedAsynchronousPattern<DownloadStringCompletedEventHandler, DownloadStringCompletedEventArgs>(h => client.DownloadStringCompleted += h,
    h => client.DownloadStringCompleted -= h, () => client.DownloadStringAsync(uri), e => e.Result);
var e = AsyncFactory<TResult>.FromEvent(client, c => c.DownloadStringAsync(uri));

public static Task<TResult> FromEvent<TObject>(TObject instance, Expression<Action<TObject>> expression)
{
  // Extract name of method from "expression".
  // Look up *Completed event and its types.
}